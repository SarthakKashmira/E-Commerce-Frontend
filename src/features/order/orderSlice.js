import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { addOrder, fetchAllOrders, fetchAllOrdersByFilter, updateOrder } from './orderAPI';

const initialState = {
  orders: [],
  status: 'idle',
  currentOrderPlaced:null,
  totalOrders:0
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addOrderAsync = createAsyncThunk(
  'order/addOrder',
  async (item) => {
    const response = await addOrder(item);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchAllOrdersAsync = createAsyncThunk(
  'order/fetchAllOrders',
  async () => {
    const response = await fetchAllOrders();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchAllOrdersByFilterAsync = createAsyncThunk(
  'order/fetchAllOrdersByFilter',
  async ({sort,pagination}) => {
    const response = await fetchAllOrdersByFilter(sort,pagination);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const updateOrderAsync = createAsyncThunk(
  'order/updateOrder',
  async (item) => {
    const response = await updateOrder(item);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const orderSlice = createSlice({
  name: 'order',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetOrder: (state) => {
      state.currentOrderPlaced=null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addOrderAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addOrderAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.orders.push(action.payload);
        state.currentOrderPlaced=action.payload;
      })
      .addCase(fetchAllOrdersByFilterAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllOrdersByFilterAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.orders=action.payload;
      
      })
      .addCase(fetchAllOrdersAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllOrdersAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.totalOrders=action.payload.length;
      })
      .addCase(updateOrderAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateOrderAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index = state.orders.findIndex(order => order.id === action.payload.id);
        state.orders[index]=action.payload;
      });

  },
});
export const {resetOrder}=orderSlice.actions;
export const selectCurrentOrderPlaced=(state)=>state.order.currentOrderPlaced;
export const selectOrders=(state)=>state.order.orders;
export const selectTotalOrders=(state)=>state.order.totalOrders;
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export default orderSlice.reducer;
